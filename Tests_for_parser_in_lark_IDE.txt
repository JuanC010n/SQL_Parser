SELECT * FROM Customers ;
SELECT * FROM Customers order by hello ASC;
SELECT * FROM Customers where customer = 1, hello = 2 ;
SELECT * FROM Customers where customer = 1, hello = 2 order by hello ;
SELECT * FROM Customers WHERE Country IN (SELECT Country FROM Suppliers);
SELECT * FROM Customers WHERE Country = Germany OR City = 1 ORDER BY hello ASC ;
SELECT * FROM Customers where hello NOT IN hi ORDER BY hello ASC ;
SELECT * FROM Customers where hello = 1 and hi = 2  NOT IN hi ORDER BY hello ASC;
SELECT distinct hi, hello FROM Customers where hello = 1 and hi = 2  IN hi ORDER BY hello ASC ;
SELECT distinct hi, hello FROM Customers where hello = 1 and hi = 2  IN hi ORDER BY hello, hi ;
SELECT distinct hi, hello FROM Customers where hello = 1 and hi = 2  in (select * from table) GROUP BY hello,hi DESC Order by hello, hi ASC;
SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country ;
SELECT Orders.OrderID, Customers.CustomerName FROM Orders INNER JOIN Customers on Orders.CustomerID = Customers.CustomerID GROUP BY hello ASC;
SELECT distinct Orders.OrderID, Customers.CustomerName FROM Orders Full Outer Join Customers on Orders.CustomerID = Customers.CustomerID GROUP BY hello, hi ASC ;
SELECT distinct hi, hello FROM Customers where hello = 1 and hi = 2 not in (select * from table) GROUP BY hello,hi DESC Having AVG(hi) = 1 Order by hello, hi ASC;
SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country HAVING COUNT(CustomerID) = 1 ORDER BY COUNT(CustomerID) DESC;
SELECT City FROM Customers UNION SELECT City FROM Suppliers ORDER BY City ;
SELECT City, Country FROM Customers WHERE Country = Germany UNION SELECT City, Country FROM Suppliers WHERE Country=Germany ORDER BY City;
SELECT SupplierName FROM Suppliers WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);
SELECT CustomerName, ContactName, Address FROM Customers WHERE Address IS NOT NULL;

Parser:

start: union|exists|null|typ
typ : sel dist* cols_def+ (from tab+) (innj)* (wher (wording_cond|cond)+ (nestin)*)* ((grp_by) sort*)* (hav (wording_cond|cond)* )* ((ordr_by) sort*)* end
dist : "distinct"|"Distinct"|"DISTINCT"
havng : "Having"|"having"|"HAVING"
hav : havng (funct_cols)* word*   
null: sel cols_def+ (from tab+)* wher cols+ null_op end
null_op: null_is|null_not
null_is : "IS" "NULL"|"Is" "Null"|"is" "null"
null_not : "Is" "Not" "NULL"|"is" "not" "null"|"IS" "NOT" "NULL"
ordr_by : (or_by (funct_cols)* word) (((comma|commas) word)*)
grp_by : (gr_by (funct_cols)* word) (((comma|commas) word)*) 
nest_eq : (wher (wording_cond|cond) (nestin)*)*
column_eq : cols "=" sel cols+ (from tab+) (innj)* (wher cond)* (or_by word sort)* (",")*
nestin : ("IN"|"In"|"in"|"NOT" "IN"|"not" "in"| "Not" "In") (((sel cols+)* ((from tab+) (innj)*)* (grp_by word (sort)*)* (or_by word (sort)*)*)|word)
cols_def : (funct_cols)* (cols_def_w | "*"|cols_def_w (comma|commas) | "*" (comma|commas)|cols_def_w"."cols_def_w (comma|commas)| cols_def_w"."cols_def_w)
cols : (funct_cols)* (cols_word | "*"|cols_word (comma|commas) | "*" (comma|commas)|cols_word"."cols_word (comma|commas)| cols_word"."cols_word)
cols_word : WORD|WORD(underscore)WORD|WORD((underscore)WORD)*"."WORD(underscore WORD)*|"*"
cols_def_w : WORD|WORD(underscore)WORD|WORD((underscore)WORD)*"."WORD(underscore WORD)*|"*"
word : WORD|WORD(underscore)WORD|WORD((underscore)WORD)*"."WORD(underscore WORD)*|"*"
comma : ","
commas :" "
exists : sel cols_def+ from tab wher exists_op sel cols from tab wher (wording_cond|cond)+ end
exists_op: "EXISTS"|"Exists"|"exists"
union : (sel cols+ from tab+) (wher (wording_cond|cond)+ (nestin)*)* union_op typ
union_op: ("UNION"|"UNION" "ALL")
tab : tab_word|"," tab_word
tab_word : WORD|WORD(underscore)WORD|WORD((underscore)WORD)*"."WORD(underscore WORD)*|"*"
sel : "SELECT"|"select"|"Select"
from : "from"|"FROM"|"From" 
wher : "WHERE"|"Where"|"where"
or_by : ("ORDER" "BY"|"Order" "by"|"order" "by"|"order" underscore "by")
gr_by : ("GROUP" "BY"|"Group" "by"|"group" "by"|"group" underscore "by")
wording_cond : (word|","word|word"."word)
wording_condres : (word|","word|word"."word|num)
num : NUMBER
cons : [/(["'])(.*?[^\\])\1/]
innj : (innj_n
|innj_lft
|innj_r
|innj_fl
|innj_flo) tab innj_op cond
innj_n : "INNER" "JOIN"|"Inner" "join"| "inner" "join"
innj_lft : "LEFT" "JOIN"|"Left" "Join"| "left" "join"
innj_r : "RIGHT" "JOIN"|"Right" "Join"| "right" "join"
innj_fl : "FULL" "JOIN"|"Full" "Join"| "full" "join"
innj_flo : "FULL" "OUTER" "JOIN"|"Full" "Outer" "Join"| "full" "outer" "join"
sort : s_asc|s_desc
s_asc : "ASC"
s_desc : "DESC"
innj_op : ("ON"|"On"|"on")
cond : (((funct_cols)*) wording_cond comparator) (cond_op (( (funct_cols)* wording_cond comparator)))*
cond_op : (and_op|or_op|not_op)
and_op :"AND"|"and"
or_op : "OR"|"or"
not_op : "NOT"|"not"
underscore : "_"
eq_comp : "="
less_comp : "<"
big_comp : ">"
neq_comp : "!="
comparator : (eq_comp(wording_condres)|big_comp wording_condres
|less_comp wording_condres|neq_comp wording_condres|"<>"wording_condres)
%import common.WORD
%import common.NUMBER
%ignore " "
%ignore "("|")"
%ignore "["|"]"
funct_cols : f_avg|f_sum|f_count|f_min|f_max
f_count : "COUNT"
f_avg : "AVG"
f_sum : "SUM"
f_min : "MIN"
f_max : "MAX"
end : ";"
